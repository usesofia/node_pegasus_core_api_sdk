/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AuthorEntity
 */
export interface AuthorEntity {
    /**
     * Identificador do autor.
     * @type {string}
     * @memberof AuthorEntity
     */
    id: string;
    /**
     * Identificador da organização.
     * @type {string}
     * @memberof AuthorEntity
     */
    organization: string;
    /**
     * Identificador do usuário que criou o autor.
     * @type {string}
     * @memberof AuthorEntity
     */
    createdByUser: string;
    /**
     * Nome completo do autor.
     * @type {string}
     * @memberof AuthorEntity
     */
    fullName: string;
    /**
     * Email do autor.
     * @type {string}
     * @memberof AuthorEntity
     */
    email: string;
    /**
     * Resumo sobre o autor.
     * @type {string}
     * @memberof AuthorEntity
     */
    summary?: string;
    /**
     * Data de criação do autor.
     * @type {Date}
     * @memberof AuthorEntity
     */
    createdAt: Date;
    /**
     * Data de atualização do autor.
     * @type {Date}
     * @memberof AuthorEntity
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the AuthorEntity interface.
 */
export function instanceOfAuthorEntity(value: object): value is AuthorEntity {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('organization' in value) || value['organization'] === undefined) return false;
    if (!('createdByUser' in value) || value['createdByUser'] === undefined) return false;
    if (!('fullName' in value) || value['fullName'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function AuthorEntityFromJSON(json: any): AuthorEntity {
    return AuthorEntityFromJSONTyped(json, false);
}

export function AuthorEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthorEntity {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'organization': json['organization'],
        'createdByUser': json['createdByUser'],
        'fullName': json['fullName'],
        'email': json['email'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function AuthorEntityToJSON(json: any): AuthorEntity {
    return AuthorEntityToJSONTyped(json, false);
}

export function AuthorEntityToJSONTyped(value?: AuthorEntity | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'organization': value['organization'],
        'createdByUser': value['createdByUser'],
        'fullName': value['fullName'],
        'email': value['email'],
        'summary': value['summary'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
    };
}

