/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e médias empresas.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatePostRequestBodyDto,
  ExceptionResponseEntity,
  PartialUpdatePostRequestBodyDto,
  PostEntity,
  PostsPageEntity,
} from '../models/index';
import {
    CreatePostRequestBodyDtoFromJSON,
    CreatePostRequestBodyDtoToJSON,
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
    PartialUpdatePostRequestBodyDtoFromJSON,
    PartialUpdatePostRequestBodyDtoToJSON,
    PostEntityFromJSON,
    PostEntityToJSON,
    PostsPageEntityFromJSON,
    PostsPageEntityToJSON,
} from '../models/index';

export interface CreatePostRequest {
    createPostRequestBodyDto: CreatePostRequestBodyDto;
    populate?: string;
}

export interface FindAllPostsRequest {
    populate?: string;
    searchTerm?: string;
    pageSize?: number;
    pageIndex?: number;
}

export interface FindOnePostRequest {
    id: string;
    populate?: string;
}

export interface PartialUpdatePostRequest {
    id: string;
    partialUpdatePostRequestBodyDto: PartialUpdatePostRequestBodyDto;
    populate?: string;
}

export interface RemovePostRequest {
    id: string;
}

/**
 * PostsApi - interface
 * 
 * @export
 * @interface PostsApiInterface
 */
export interface PostsApiInterface {
    /**
     * 
     * @summary Cria um novo post.
     * @param {CreatePostRequestBodyDto} createPostRequestBodyDto 
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiInterface
     */
    createPostRaw(requestParameters: CreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostEntity>>;

    /**
     * Cria um novo post.
     */
    createPost(requestParameters: CreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostEntity>;

    /**
     * 
     * @summary Busca todos os posts.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {string} [searchTerm] Termo para busca por título do post.
     * @param {number} [pageSize] Quantidade de itens por página.
     * @param {number} [pageIndex] Índice da página.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiInterface
     */
    findAllPostsRaw(requestParameters: FindAllPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostsPageEntity>>;

    /**
     * Busca todos os posts.
     */
    findAllPosts(requestParameters: FindAllPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostsPageEntity>;

    /**
     * 
     * @summary Busca um post pelo identificador.
     * @param {string} id Identificador do post.
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiInterface
     */
    findOnePostRaw(requestParameters: FindOnePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostEntity>>;

    /**
     * Busca um post pelo identificador.
     */
    findOnePost(requestParameters: FindOnePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostEntity>;

    /**
     * 
     * @summary Atualiza parcialmente um post.
     * @param {string} id Identificador do post.
     * @param {PartialUpdatePostRequestBodyDto} partialUpdatePostRequestBodyDto 
     * @param {string} [populate] Campos relacionados a serem populados separados por vírgula.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiInterface
     */
    partialUpdatePostRaw(requestParameters: PartialUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostEntity>>;

    /**
     * Atualiza parcialmente um post.
     */
    partialUpdatePost(requestParameters: PartialUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostEntity>;

    /**
     * 
     * @summary Remove um post.
     * @param {string} id Identificador do post.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApiInterface
     */
    removePostRaw(requestParameters: RemovePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Remove um post.
     */
    removePost(requestParameters: RemovePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class PostsApi extends runtime.BaseAPI implements PostsApiInterface {

    /**
     * Cria um novo post.
     */
    async createPostRaw(requestParameters: CreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostEntity>> {
        if (requestParameters['createPostRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'createPostRequestBodyDto',
                'Required parameter "createPostRequestBodyDto" was null or undefined when calling createPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/posts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePostRequestBodyDtoToJSON(requestParameters['createPostRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostEntityFromJSON(jsonValue));
    }

    /**
     * Cria um novo post.
     */
    async createPost(requestParameters: CreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostEntity> {
        const response = await this.createPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca todos os posts.
     */
    async findAllPostsRaw(requestParameters: FindAllPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostsPageEntity>> {
        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        if (requestParameters['searchTerm'] != null) {
            queryParameters['searchTerm'] = requestParameters['searchTerm'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/posts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostsPageEntityFromJSON(jsonValue));
    }

    /**
     * Busca todos os posts.
     */
    async findAllPosts(requestParameters: FindAllPostsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostsPageEntity> {
        const response = await this.findAllPostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca um post pelo identificador.
     */
    async findOnePostRaw(requestParameters: FindOnePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findOnePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostEntityFromJSON(jsonValue));
    }

    /**
     * Busca um post pelo identificador.
     */
    async findOnePost(requestParameters: FindOnePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostEntity> {
        const response = await this.findOnePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Atualiza parcialmente um post.
     */
    async partialUpdatePostRaw(requestParameters: PartialUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling partialUpdatePost().'
            );
        }

        if (requestParameters['partialUpdatePostRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'partialUpdatePostRequestBodyDto',
                'Required parameter "partialUpdatePostRequestBodyDto" was null or undefined when calling partialUpdatePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PartialUpdatePostRequestBodyDtoToJSON(requestParameters['partialUpdatePostRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostEntityFromJSON(jsonValue));
    }

    /**
     * Atualiza parcialmente um post.
     */
    async partialUpdatePost(requestParameters: PartialUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostEntity> {
        const response = await this.partialUpdatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove um post.
     */
    async removePostRaw(requestParameters: RemovePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove um post.
     */
    async removePost(requestParameters: RemovePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removePostRaw(requestParameters, initOverrides);
    }

}
