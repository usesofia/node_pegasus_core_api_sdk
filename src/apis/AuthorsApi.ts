/* tslint:disable */
/* eslint-disable */
/**
 * Sofia Pegasus core-api
 * Api principal do sistema Pegasus para gerenciamento financeiro de pequenas e m√©dias empresas.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthorEntity,
  AuthorsPageEntity,
  CreateAuthorRequestBodyDto,
  ExceptionResponseEntity,
  PartialUpdateAuthorRequestBodyDto,
} from '../models/index';
import {
    AuthorEntityFromJSON,
    AuthorEntityToJSON,
    AuthorsPageEntityFromJSON,
    AuthorsPageEntityToJSON,
    CreateAuthorRequestBodyDtoFromJSON,
    CreateAuthorRequestBodyDtoToJSON,
    ExceptionResponseEntityFromJSON,
    ExceptionResponseEntityToJSON,
    PartialUpdateAuthorRequestBodyDtoFromJSON,
    PartialUpdateAuthorRequestBodyDtoToJSON,
} from '../models/index';

export interface CreateAuthorRequest {
    createAuthorRequestBodyDto: CreateAuthorRequestBodyDto;
    populate?: string;
}

export interface FindAllAuthorsRequest {
    populate?: string;
    searchTerm?: string;
    pageSize?: number;
    pageIndex?: number;
}

export interface FindOneAuthorRequest {
    id: string;
    populate?: string;
}

export interface PartialUpdateAuthorRequest {
    id: string;
    partialUpdateAuthorRequestBodyDto: PartialUpdateAuthorRequestBodyDto;
    populate?: string;
}

export interface RemoveAuthorRequest {
    id: string;
}

/**
 * 
 */
export class AuthorsApi extends runtime.BaseAPI {

    /**
     * Cria um novo autor.
     */
    async createAuthorRaw(requestParameters: CreateAuthorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorEntity>> {
        if (requestParameters['createAuthorRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'createAuthorRequestBodyDto',
                'Required parameter "createAuthorRequestBodyDto" was null or undefined when calling createAuthor().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/authors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAuthorRequestBodyDtoToJSON(requestParameters['createAuthorRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorEntityFromJSON(jsonValue));
    }

    /**
     * Cria um novo autor.
     */
    async createAuthor(requestParameters: CreateAuthorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorEntity> {
        const response = await this.createAuthorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca todos os autores.
     */
    async findAllAuthorsRaw(requestParameters: FindAllAuthorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorsPageEntity>> {
        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        if (requestParameters['searchTerm'] != null) {
            queryParameters['searchTerm'] = requestParameters['searchTerm'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['pageIndex'] != null) {
            queryParameters['pageIndex'] = requestParameters['pageIndex'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/authors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorsPageEntityFromJSON(jsonValue));
    }

    /**
     * Busca todos os autores.
     */
    async findAllAuthors(requestParameters: FindAllAuthorsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorsPageEntity> {
        const response = await this.findAllAuthorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Busca um autor pelo identificador.
     */
    async findOneAuthorRaw(requestParameters: FindOneAuthorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findOneAuthor().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/authors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorEntityFromJSON(jsonValue));
    }

    /**
     * Busca um autor pelo identificador.
     */
    async findOneAuthor(requestParameters: FindOneAuthorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorEntity> {
        const response = await this.findOneAuthorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Atualiza parcialmente um autor.
     */
    async partialUpdateAuthorRaw(requestParameters: PartialUpdateAuthorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling partialUpdateAuthor().'
            );
        }

        if (requestParameters['partialUpdateAuthorRequestBodyDto'] == null) {
            throw new runtime.RequiredError(
                'partialUpdateAuthorRequestBodyDto',
                'Required parameter "partialUpdateAuthorRequestBodyDto" was null or undefined when calling partialUpdateAuthor().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['populate'] != null) {
            queryParameters['populate'] = requestParameters['populate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/authors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PartialUpdateAuthorRequestBodyDtoToJSON(requestParameters['partialUpdateAuthorRequestBodyDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorEntityFromJSON(jsonValue));
    }

    /**
     * Atualiza parcialmente um autor.
     */
    async partialUpdateAuthor(requestParameters: PartialUpdateAuthorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorEntity> {
        const response = await this.partialUpdateAuthorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove um autor.
     */
    async removeAuthorRaw(requestParameters: RemoveAuthorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeAuthor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/authors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove um autor.
     */
    async removeAuthor(requestParameters: RemoveAuthorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeAuthorRaw(requestParameters, initOverrides);
    }

}
